// @ts-nocheck
export default class HTML{static async generate(e,t,n={title:document.title,styles:[],type:"text/html"}){try{const r=(new DOMParser).parseFromString(await fetch(t).then((e=>e.text())),"text/html");n.styles&&0!==n.styles.length&&await Promise.all(n.styles.map((async e=>{const t=document.createElement("style");t.innerHTML=await fetch(e).then((e=>e.text())),r.head.append(t)}))),r.title=n.title??document.title;const o=`\n                <!DOCTYPE html>\n                <html lang="fr">\n                <head>\n                    ${r.head.outerHTML}\n                </head>\n                <body>\n                    ${e.innerHTML}\n                </body>\n                </html>\n            `,a=document.createElement("a");a.href=URL.createObjectURL(new Blob([o],{type:n.type??"text/html"})),a.download=r.title,a.click()}catch(e){console.error(e)}}static async createButton(e,t,n,r={styles:[],position:"before",buttonText:"HTML + CSS ⭳",title:document.title}){if(!e)throw new Error("L'élément référent ne peut pas être vide. Vérifier que votre élément existe ou est bien créé avant son appel.");if(!t)throw new Error("Le contenu ne peut pas être vide. Vérifier que votre élément existe ou est bien créé avant son appel.");r.title=r?.title?.replace(/[^a-zA-Z0-9À-ÿ\ ]+/g,"-")??document.title;const o=document.createElement("button");o.innerHTML=r.buttonText??"HTML + CSS ⭳",o.title=r.title,o.type="button",delete r.buttonText;const a={before:"beforebegin",start:"afterbegin",end:"beforeend",after:"afterend"}[r.position??"before"]||"beforebegin";delete r.position,o.addEventListener("click",(async()=>await HTML.generate(t,n,r))),e.insertAdjacentElement(a,o)}}