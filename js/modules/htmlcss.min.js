// @ts-nocheck
export default class HTML{static async generate(e,t,n={title:document.title,styles:[],type:"text/html"}){try{const r=(new DOMParser).parseFromString(await fetch(t).then((e=>e.text())),"text/html");n.styles&&0!==n.styles.length&&await Promise.all(n.styles.map((async e=>{const t=document.createElement("style");t.innerHTML=await fetch(e).then((e=>e.text())),r.head.append(t)}))),r.title=n.title??document.title;const a=`\n                <!DOCTYPE html>\n                <html lang="fr">\n                <head>\n                    ${r.head.outerHTML}\n                </head>\n                <body>\n                    ${e.innerHTML}\n                </body>\n                </html>\n            `,o=document.createElement("a");o.href=URL.createObjectURL(new Blob([a],{type:n.type??"text/html"})),o.download=r.title,o.click()}catch(e){console.error(e)}}static async createButton(e,t,n={position:"before",buttonText:"HTML + CSS ⭳",styles:[],title:document.title,template:null}){if(!e)throw new Error("L'élément référent ne peut pas être vide. Vérifier que votre élément existe ou est bien créé avant son appel.");if(!t)throw new Error("Le contenu ne peut pas être vide. Vérifier que votre élément existe ou est bien créé avant son appel.");n.title=n?.title?.replace(/[^a-zA-Z0-9À-ÿ\ ]+/g,"-")??document.title;const r=document.createElement("button");r.innerHTML=n.buttonText??"HTML + CSS ⭳",r.title=n.title,r.type="button",delete n.buttonText;const a={before:"beforebegin",start:"afterbegin",end:"beforeend",after:"afterend"}[n.position??"before"]||"beforebegin";delete n.position,r.addEventListener("click",(async()=>await HTML.generate(t,n.template,n))),e.insertAdjacentElement(a,r)}}